[
["index.html", "BCB420 - Computational System Biology Bioinfo - Basics Chapter 1 About 1.1 Attributions:", " BCB420 - Computational System Biology Bioinfo - Basics Main author: Boris Steipe; Modified: Ruth Isserlin last modified 2020-01-03 Chapter 1 About Original content for this book was created by Boris Steipe from Boris Steipe BCB420 wiki resources licensed under CC BY 4.0. 1.1 Attributions: This book was created using The bookdown package and can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Icons are from the “Very Basic. Android L Lollipop” set by Ivan Boyko licensed under CC BY 3.0. "],
["abstractions.html", "Chapter 2 Abstractions for Bioinformatics 2.1 Overview 2.2 Task 1", " Chapter 2 Abstractions for Bioinformatics (Introduction to nature of abstractions; examples; abstractions for biology; structuring abstractions: controlled vocabularies and ontologies.) 2.1 Overview 2.1.1 Abstract: This unit comprises introductory notes on the nature of abstractions with an example from the art of tying ties. We review typical abstractions for biology and discuss options for structuring labels and relationships. 2.1.2 Objectives: This unit will: introduce the concept of an “abstraction”, as applied to making concepts about biology computable; illustrate with examples; discuss principles of how to address issues of uniqueness and structuring of abstractions. 2.1.3 Outcomes: After working through this unit you: can describe what the purpose of an abstraction is; have encountered common abstractions for bioinformatics; are able to come up with examples for “numerically controlled vocabularies” and “synonym constrained vocabularies”; have thought about an abstraction for a complex biological situation; are able to contrast your solution to the canonical approach. 2.1.4 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. 2.1.5 Prerequisites: You need the following preparation before beginning this unit. If you are not familiar with this material from courses you took previously, you need to prepare yourself from other information sources: Biomolecules: The molecules of life; nucleic acids and amino acids; the genetic code; protein folding; post-translational modifications and protein biochemistry; membrane proteins; biological function. This unit builds on material covered in the following prerequisite units: ABC-BIN-Preparation (Bioinformatics Course Preparation) BIN-MYSPE (MYSPE (My Species)) FND-Cell_cycle (The Yeast Cell Cycle) 2.2 Task 1 Read the introductory notes on “Abstractions” for Bioinformatics. It is common for transcription factors to stimulate or repress the expression of other transcription factors, which in turn act on the expression of more proteins. In addition, proteins that catalyze post-translational modifications can play an important role in such regulation. Assume you would like to store facts about this situation. What abstraction could you design? Think about the actors and their roles in this process. Then define what is essential.The common abstraction for this is a “gene regulatory network”, a graph in which the nodes are gene labels and the edges define a relationship that is either activating or repressing. The individual facts are represented as the existence of nodes and edges, and as attributes to nodes and edges. Now ask yourself: can this abstraction represent all types of facts? Is this abstraction what you came up with? Is your idea different? Better? If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2017-09-19 Version: 1.0 Version history: 1.0 Completed to first live version 0.1 First stub "],
["storing-data.html", "Chapter 3 Storing Data 3.1 Overview 3.2 Evaluation 3.3 Task 2 3.4 Text files 3.5 Spreadsheets 3.6 R 3.7 MySQL and friends 3.8 Store Data 3.9 Task 3 3.10 Further reading, links and resources", " Chapter 3 Storing Data (Representation of data; common data formats; implementing a data model; JSON.) 3.1 Overview 3.1.1 Abstract: This unit discusses options for storing and organizing data in a variety of formats, and develops R code for a protein data model, based on JSON formatted source data. 3.1.2 Objectives: This unit will: Introduce principles of storing data in different formats and principles of supporting storage, maintenance, and retrieval with different tools; Implement relational data models as lists of data frames in R; Develop code for this purpose and teach how to work with such code; Find the closest homologue of Mbp1 in MYSPE. 3.1.3 Outcomes: After working through this unit you: can recommend alternatives for storing data, depending on the context and objectives; can create, edit and validate JSON formatted data; have practiced creating a relational database as a list of dataframes; can query the database directly, and via cross-referenc ing tables; have discovered the closest homologue to yeast Mbp1 in MYSPE; have added key information about this protein to the database; 3.1.4 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. 3.1.5 Prerequisites: This unit builds on material covered in the following prerequisite units: BIN-Abstractions (Abstractions for Bioinformatics) 3.2 Evaluation This learning unit can be evaluated for a maximum of 6 marks. If you want to submit the tasks for this unit for credit: Create a new page on the student Wiki as a subpage of your User Page. There are a number of tasks in which you are explicitly asked you to submit code or other text for credit. Put all of these submission on this one page. When you are done with everything, add the following category tag to the end of page:[[Category:EVAL-BIN-Storing_data]]. Once the page has been saved with this tag, it is considered “submitted”. Do not change your submission after this tag has been added. The page will be marked and the category tag will be removed by the instructor. 3.3 Task 2 Read the introductory notes on concepts about storing data for bioinformatics. Any software project requires modelling on many levels - data-flow models, logic models, user interaction models and more. But all of these ultimately rely on a data model that defines how the world is going to be represented in the computer for the project’s purpose. The process of abstraction of data entities and defining their relationships can (and should) take up a major part of the project definition, often taking several iterations until you get it right. Whether your data can be completely described, consistently stored and efficiently retrieved is determined to a large part by your data model. Databases can take many forms, from memories in your brain, to shoe-cartons under your bed, to software applications on your computer, or warehouse-sized data centres. Fundamentally, these all do the same thing: collect information and make it available. Let us consider collecting information on APSES-domain transcription factors in various fungi, with the goal of being able to compare them. Let’s specify this as follows: Store data on APSES-domain proteins so that we can * cross reference the source databases; * study if they have the same features (e.g. domains);and compare the features. * The underlying information can easily be retrieved for a protein from its RefSeq or UniProt entry. 3.4 Text files A first attempt to organize the data might be simply to write it down as text: name: Mbp1 refseq ID: NP_010227 uniprot ID: P39678 species: Saccharomyces cerevisiae taxonomy ID: 4392 sequence: MSNQIYSARYSGVDVYEFIHSTGSIMKRKKDDWVNATHILKAANFAKAKR TRILEKEVLKETHEKVQGGFGKYQGTWVPLNIAKQLAEKFSVYDQLKPLF DFTQTDGSASPPPAPKHHHASKVDRKKAIRSASTSAIMETKRNNKKAEEN QFQSSKILGNPTAAPRKRGRPVGSTRGSRRKLGVNLQRSQSDMGFPRPAI PNSSISTTQLPSIRSTMGPQSPTLGILEEERHDSRQQQPQQNNSAQFKEI DLEDGLSSDVEPSQQLQQVFNQNTGFVPQQQSSLIQTQQTESMATSVSSS PSLPTSPGDFADSNPFEERFPGGGTSPIISMIPRYPVTSRPQTSDINDKV NKYLSKLVDYFISNEMKSNKSLPQVLLHPPPHSAPYIDAPIDPELHTAFH WACSMGNLPIAEALYEAGTSIRSTNSQGQTPLMRSSLFHNSYTRRTFPRI FQLLHETVFDIDSQSQTVIHHIVKRKSTTPSAVYYLDVVLSKIKDFSPQY RIELLLNTQDKNGDTALHIASKNGDVVFFNTLVKMGALTTISNKEGLTAN EIMNQQYEQMMIQNGTNQHVNSSNTDLNIHVNTNNIETKNDVNSMVIMSP VSPSDYITYPSQIATNISRNIPNVVNSMKQMASIYNDLHEQHDNEIKSLQ KTLKSISKTKIQVSLKTLEVLKESSKDENGEAQTNDDFEILSRLQEQNTK KLRKRLIRYKRLIKQKLEYRQTVLLNKLIEDETQATTNNTVEKDNNTLER LELAQELTMLQLQRKNKLSSLVKKFEDNAKIHKYRRIIREGTEMNIEEVD SSLDVILQTLIANNNKNKGAEQIITISNANSHA length: 833 Kila-N domain: 21-93 Ankyrin domains: 369-455, 505-549 … … and save it all in one large text file and whenever you need to look something up, you just open the file, look for e.g. the name of the protein and read what’s there. Or - for a more structured approach, you could put this into several files in a folder.1 This is a perfectly valid approach and for some applications it might not be worth the effort to think more deeply about how to structure the data, and store it in a way that it is robust and scales easily to large datasets. Alas, small projects have a tendency to grow into large projects and if you work in this way, it’s almost guaranteed that you will end up doing many things by hand that could easily be automated. Imagine asking questions like: How many proteins do I have? What’s the sequence of the Kila-N domain? What percentage of my proteins have an Ankyrin domain? Or two …? Answering these questions “by hand” is possible, but tedious. 3.5 Spreadsheets Data for three yeast APSES domain proteins in an Excel spreadsheet. Many serious researchers keep their project data in spreadsheets. Often they use Excel, or an alternative like the free OpenOffice Calc, or Google Sheets, both of which are compatible with Excel and have some interesting advantages. Here, all your data is in one place, easy to edit. You can even do simple calculations - although you should never use Excel for statistics2. You could answer What percentage of my proteins have an Ankyrin domain? quite easily3. There are two major downsides to spreadsheets. For one, complex queries need programming. There is no way around this. You can program inside Excel with Visual Basic. But you might as well export your data so you can work on it with a “real” programming language. The other thing is that Excel does not scale very well. Once you have more than a hundred proteins in your spreadsheet, you can see how finding anything can become tedious. However, just because it was built for business applications, and designed for use by office assistants, does not mean it is intrinsically unsuitable for our domain. It’s important to be pragmatic, not dogmatic, when choosing tools: choose according to your real requirements. Sometimes “quick and dirty” is just fine, because quick. 3.6 R R can keep complex data in data frames and lists. If we do data analysis with R, we have to load the data first. We can use any of the read.table() functions for structured data, read lines of raw text with readLines(), or slurp in entire files with scan(). Convenient packages exist to parse structured data like XML or JSON and import it. But we could also keep the data in an R object in the first place that we can read from disk, analyze, modify, and write back. In this case, R becomes our database engine. # Sample construction of an R database table as a dataframe # Data for the Mbp1 protein proteins &lt;- data.frame( name = &quot;Mbp1&quot;, refSeq = &quot;NP_010227&quot;, uniProt = &quot;P39678&quot;, species = &quot;Saccharomyces cerevisiae&quot;, taxId = &quot;4392&quot;, sequence = paste( &quot;MSNQIYSARYSGVDVYEFIHSTGSIMKRKKDDWVNATHILKAANFAKAKR&quot;, &quot;TRILEKEVLKETHEKVQGGFGKYQGTWVPLNIAKQLAEKFSVYDQLKPLF&quot;, &quot;DFTQTDGSASPPPAPKHHHASKVDRKKAIRSASTSAIMETKRNNKKAEEN&quot;, &quot;QFQSSKILGNPTAAPRKRGRPVGSTRGSRRKLGVNLQRSQSDMGFPRPAI&quot;, &quot;PNSSISTTQLPSIRSTMGPQSPTLGILEEERHDSRQQQPQQNNSAQFKEI&quot;, &quot;DLEDGLSSDVEPSQQLQQVFNQNTGFVPQQQSSLIQTQQTESMATSVSSS&quot;, &quot;PSLPTSPGDFADSNPFEERFPGGGTSPIISMIPRYPVTSRPQTSDINDKV&quot;, &quot;NKYLSKLVDYFISNEMKSNKSLPQVLLHPPPHSAPYIDAPIDPELHTAFH&quot;, &quot;WACSMGNLPIAEALYEAGTSIRSTNSQGQTPLMRSSLFHNSYTRRTFPRI&quot;, &quot;FQLLHETVFDIDSQSQTVIHHIVKRKSTTPSAVYYLDVVLSKIKDFSPQY&quot;, &quot;RIELLLNTQDKNGDTALHIASKNGDVVFFNTLVKMGALTTISNKEGLTAN&quot;, &quot;EIMNQQYEQMMIQNGTNQHVNSSNTDLNIHVNTNNIETKNDVNSMVIMSP&quot;, &quot;VSPSDYITYPSQIATNISRNIPNVVNSMKQMASIYNDLHEQHDNEIKSLQ&quot;, &quot;KTLKSISKTKIQVSLKTLEVLKESSKDENGEAQTNDDFEILSRLQEQNTK&quot;, &quot;KLRKRLIRYKRLIKQKLEYRQTVLLNKLIEDETQATTNNTVEKDNNTLER&quot;, &quot;LELAQELTMLQLQRKNKLSSLVKKFEDNAKIHKYRRIIREGTEMNIEEVD&quot;, &quot;SSLDVILQTLIANNNKNKGAEQIITISNANSHA&quot;, sep=&quot;&quot;), seqLen = 833, KilAN = &quot;21-93&quot;, Ankyrin = &quot;369-455, 505-549&quot;, stringsAsFactors = FALSE) # add data for the Swi4 protein proteins &lt;- rbind(proteins, data.frame( name = &quot;Swi4&quot;, refSeq = &quot;NP_011036&quot;, uniProt = &quot;P25302&quot;, species = &quot;Saccharomyces cerevisiae&quot;, taxId = &quot;4392&quot;, sequence = paste( &quot;MPFDVLISNQKDNTNHQNITPISKSVLLAPHSNHPVIEIATYSETDVYEC&quot;, &quot;YIRGFETKIVMRRTKDDWINITQVFKIAQFSKTKRTKILEKESNDMQHEK&quot;, &quot;VQGGYGRFQGTWIPLDSAKFLVNKYEIIDPVVNSILTFQFDPNNPPPKRS&quot;, &quot;KNSILRKTSPGTKITSPSSYNKTPRKKNSSSSTSATTTAANKKGKKNASI&quot;, &quot;NQPNPSPLQNLVFQTPQQFQVNSSMNIMNNNDNHTTMNFNNDTRHNLINN&quot;, &quot;ISNNSNQSTIIQQQKSIHENSFNNNYSATQKPLQFFPIPTNLQNKNVALN&quot;, &quot;NPNNNDSNSYSHNIDNVINSSNNNNNGNNNNLIIVPDGPMQSQQQQQHHH&quot;, &quot;EYLTNNFNHSMMDSITNGNSKKRRKKLNQSNEQQFYNQQEKIQRHFKLMK&quot;, &quot;QPLLWQSFQNPNDHHNEYCDSNGSNNNNNTVASNGSSIEVFSSNENDNSM&quot;, &quot;NMSSRSMTPFSAGNTSSQNKLENKMTDQEYKQTILTILSSERSSDVDQAL&quot;, &quot;LATLYPAPKNFNINFEIDDQGHTPLHWATAMANIPLIKMLITLNANALQC&quot;, &quot;NKLGFNCITKSIFYNNCYKENAFDEIISILKICLITPDVNGRLPFHYLIE&quot;, &quot;LSVNKSKNPMIIKSYMDSIILSLGQQDYNLLKICLNYQDNIGNTPLHLSA&quot;, &quot;LNLNFEVYNRLVYLGASTDILNLDNESPASIMNKFNTPAGGSNSRNNNTK&quot;, &quot;ADRKLARNLPQKNYYQQQQQQQQPQNNVKIPKIIKTQHPDKEDSTADVNI&quot;, &quot;AKTDSEVNESQYLHSNQPNSTNMNTIMEDLSNINSFVTSSVIKDIKSTPS&quot;, &quot;KILENSPILYRRRSQSISDEKEKAKDNENQVEKKKDPLNSVKTAMPSLES&quot;, &quot;PSSLLPIQMSPLGKYSKPLSQQINKLNTKVSSLQRIMGEEIKNLDNEVVE&quot;, &quot;TESSISNNKKRLITIAHQIEDAFDSVSNKTPINSISDLQSRIKETSSKLN&quot;, &quot;SEKQNFIQSLEKSQALKLATIVQDEESKVDMNTNSSSHPEKQEDEEPIPK&quot;, &quot;STSETSSPKNTKADAKFSNTVQESYDVNETLRLATELTILQFKRRMTTLK&quot;, &quot;ISEAKSKINSSVKLDKYRNLIGITIENIDSKLDDIEKDLRANA&quot;, sep=&quot;&quot;), seqLen = 1093, KilAN = &quot;56-122&quot;, Ankyrin = &quot;516-662&quot;, stringsAsFactors = FALSE) ) # how many proteins? nrow(proteins) ## [1] 2 #what are their names? proteins[,&quot;name&quot;] ## [1] &quot;Mbp1&quot; &quot;Swi4&quot; # how many do not have an Ankyrin domain? sum(proteins[,&quot;Ankyrin&quot;] == &quot;&quot;) ## [1] 0 # save it to file save(proteins, file=&quot;proteinData.Rda&quot;) # delete it from memory rm(proteins) # check... if(!exists(&quot;proteins&quot;)){ paste(&quot;Error: object &#39;proteins&#39; not found&quot;) } # ... yes, it&#39;s gone ## [1] &quot;Error: object &#39;proteins&#39; not found&quot; # read it back in: load(&quot;proteinData.Rda&quot;) # did this work? sum(proteins[,&quot;seqLen&quot;]) # 1926 amino acids ## [1] 1926 # [END] The third way to use R for data is to connect it to a “real” database: a relational database like mySQL, MariaDB, or PostgreSQL; an object/document database like {{WP|MongoDB}; or even a graph-database like Neo4j. R “drivers” are available for all of these. However all of these require installing extra software on your computer: the actual database, which runs as an independent application. If you need a rock-solid database with guaranteed integrity, multi-user support, ACID transactional gurantees, industry standard performance, and scalability to even very large datasets, don’t think of rolling your own solution. One of the above is the way to go. 3.7 MySQL and friends A “Schema” for a table that stores data for APSES domain proteins. This is a screenshot of the free MySQL Workbench application. MySQL is a free, open relational database that powers some of the largest corporations as well as some of the smallest laboratories. It is based on a client-server model. The database engine runs as a daemon in the background and waits for connection attempts. When a connection is established, the server process establishes a communication session with the client. The client sends requests, and the server responds. One can do this interactively, by running the client program /usr/local/mysql/bin/mysql (on Unix systems). Or, when you are using a program such as R, Python, Perl, etc. you use the appropriate method calls or functions—the driver—to establish the connection. These types of databases use their own language to describe actions: SQL - which handles data definition, data manipulation, and data control. Just for illustration, the Figure above shows a table for our APSES domain protein data, built as a table in the MySQL workbench application and presented as an Entity Relationship Diagram (ERD). There is only one entity though - the protein “table”. The application can generate the actual code that implements this model on a SQL compliant database: CREATE TABLE IF NOT EXISTS `mydb`.`proteins` ( `name` VARCHAR(20) NULL, `refSeq` VARCHAR(20) NOT NULL, `uniProt` VARCHAR(20) NULL, `species` VARCHAR(45) NOT NULL COMMENT &#39; &#39;, `taxId` VARCHAR(10) NULL, `sequence` BLOB NULL, `seqLen` INT NULL, `KilA-N` VARCHAR(45) NULL, `Ankyrin` VARCHAR(45) NULL, PRIMARY KEY (`refSeq`)) ENGINE = InnoDB This looks at least as complicated as putting the model into R in the first place. Why then would we do this, if we need to load it into R for analysis anyway. There are several important reasons. Scalability: these systems are built to work with very large datasets and optimized for performance. In theory R has very good performance with large data objects, but not so when the data becomes larger than what the computer can keep in memory all at once. Concurrency: when several users need to access the data potentially at the same time, you must use a “real” database system. Handling problems of concurrent access is what they are made for. ACID compliance. ACID describes four aspects that make a database robust, these are crucial for situations in which you have only partial control over your system or its input, and they would be quite laborious to implement for your hand built R data model: Atomicity: Atomicity requires that each transaction is handled “indivisibly”: it either succeeds fully, with all requested elements, or not at all. Consistency: Consistency requires that any transaction will bring the database from one valid state to another. In particular any data-validation rules have to be enforced. Isolation: Isolation ensures that any concurrent execution of transactions results in the exact same database state as if transactions would have been executed serially, one after the other. Durability: The Durability requirement ensures that a committed transaction remains permanently committed, even in the event that the database crashes or later errors occur. You can think of this like an “autosave” function on every operation. All the database systems I have mentioned above are ACID compliant4. Incidentally - we are looking forward to RStudio 1.1 with it’s promise to bring R syntax to the interaction with SQL databases, removing another barrier. 3.8 Store Data 3.8.1 A protein datamodel Entity-Relationship Diagram (ERD) for a protein data model that includes protein, taxonomy and feature annotations. Entity names are at the top of each box, attributes are listed below. If you think of an entity as an R dataframe, or a spreadsheet table, the attributes are the column names and each specific instance of an entity fills one row (or “record”).All relationships link to unique primary keys and are thus 1 to (0, n). The diagram was drawn as a “Google drawing” and you can view it on the Web and make a copy for your own purposes. 3.8.2 Implementing the Data Model in R To actually implement the data model in R we will create the tables as data frames, and we will collect them in a list. We don’t have to keep the tables in a list - we could also keep them as independent objects, but a list is neater, more flexible (we might want to have several of these), it reflects our intent about the model better, and doesn’t require very much more typing. 3.9 Task 3 Open RStudio and load the ABC-units R project. If you have loaded it before, choose File → Recent projects → ABC-Units. If you have not loaded it before, follow the instructions in the RPR-Introduction unit. Choose Tools → Version Control → Pull Branches to fetch the most recent version of the project from its GitHub repository with all changes and bug fixes included. Type init() as requested. Open the file BIN-Storing_data.R and follow the instructions. Note: take care that you understand all of the code in the script. Evaluation in this course is cumulative and you may be asked to explain any part of code. 3.10 Further reading, links and resources Database normalization Overview of data model types (Lucidchart) If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2017-09-22 Version: 1.0.1 Version history: 1.0.1 Add link to data model types overview 1.0 Completed to first live version 0.1 First stub Your operating system can help you keep the files organized. The “file system” is a database.↩ For real: Excel is miserable and often wrong on statistics, and it makes horrible, ugly plots. See here and here why Excel problems are not merely cosmetic.↩ At the bottom of the window there is a menu that says “sum = …” by default. This provides simple calculations on the selected range. Set the choice to “count”, select all Ankyrin domain entries, and the count shows you how many cells actually have a value.↩ For a list of relational Database Management Systems, see here.↩ "],
["bioinfo-databases.html", "Chapter 4 Bioinformatics Databases 4.1 Overview 4.2 Task 4 4.3 Further reading, links and resources", " Chapter 4 Bioinformatics Databases (Database principles for bioinformatics) 4.1 Overview 4.1.1 Abstract: Large, scalable, multi-user database systems require a fair amount of technology underneath the hood. In particular, they need to fulfill the ACID requirements that ensure database integrity. This unit introduces the principles, and then moves onto an overview of current bioinformatics databases, and Web services. 4.1.2 Objectives: This unit will: describes construction principles for database systems; mentions some general aspects of dtabase use in bioinformatics; explores the current NAR database and Web service issues. 4.1.3 Outcomes: After working through this unit you: can define the four ACID requirements for tranactional integrity of databases; are familar with a spectrum of database and Web service offerings in bioinformatics. 4.1.4 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. 4.1.5 Prerequisites: This unit builds on material covered in the following prerequisite units: BIN-Storing_data (Storing Data)) In this unit we develop the technical context of bioinformatics databases and get a perspective on the multitude of data offerings in the field. Data and service offerings have no clearly defined boundaries, and many sites offer a mix of both. Thus we explore current Web services as well to define the landscape. 4.2 Task 4 Read the introductory notes on construction principles for large, multi-user, scalable database systems. Visit the current Database Issue of NAR and browse the titles. Read the editorial article in this issue: Galperin et al. (2017) The 24th annual Nucleic Acids Research database issue: a look back and upcoming changes. Nucleic Acids Res 45:D1-D11. (pmid: 28053160) [ PubMed ][ DOI ] [Abstract] Visit the current Web Service Issue of NAR and browse the titles. Read the editorial article on this issue. 4.3 Further reading, links and resources If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2017-10-01 Version: 1.0 Version history: 1.0 Completed to first live version 0.1 First stub "],
["ncbi-services.html", "Chapter 5 The NCBI Database and Services 5.1 Overview 5.2 Task 5 5.3 Entrez 5.4 Task 6 5.5 Task 7 5.6 Protein Sequence 5.7 Task 8 5.8 Task 9 5.9 PubMed 5.10 Task 10 5.11 Digression: A “bookmarklet” to access literature 5.12 Original Information and Annotation Transfer 5.13 Task 11 5.14 Self-evaluation 5.15 Further reading, links and resources", " Chapter 5 The NCBI Database and Services (The NCBI databases and services) 5.1 Overview 5.1.1 Abstract: The NCBI hosts some of the world’s most important bioinformatics databases and services. This learning unit explores them in the context of our search for information on yeast Mbp1 and its homologue in MYSPE. 5.1.2 Objectives: This unit will: introduce the Entrez system of NCBI databases and its associated services; demonstrate how to navigate from a generic search to a specific record in the RefSeq Protein database and what information is linked from there; teach Entrez field codes and qualifiers for searches. 5.1.3 Outcomes: After working through this unit you: can find the RefSeq Protein record for the Mbp1 homologue in MYSPE; are familar with the NCBI databases, and how Entrez cross-references them; can confidently apply the correct field codes to search for specific entries. 5.1.4 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. 5.1.5 Prerequisites: This unit builds on material covered in the following prerequisite units: BIN-Databases (Bioinformatics Databases) The NCBI (National Center for Biotechnology Information) is one of the two largest, international providers of data for genomics and molecular biology (the EBI is the other). With its annual budget of several hundred million dollars, it organizes a challenging program of data management at the largest scale, it makes its data freely and openly available over the Internet, worldwide, and it runs significant in-house research projects. In this unit we explore some of the offerings of the NCBI that can contribute to our objective of studying a particular gene in an organism of interest. 5.2 Task 5 Read the introductory article on NCBI database resources: NCBI Resource Coordinators (2019) Database Resources of the National Center for Biotechnology Information. Nucleic Acids Res 47:D23-D28. (pmid: 27899561) PubMed 5.3 Entrez 5.4 Task 6 Remember to document your activities as lab-notes on your Wiki. Access the NCBI website at http://www.ncbi.nlm.nih.gov/ [If you find this URL hard to remember, consider the acronyms:ncbi.nlm.nih.govNCBI: National Center for Biotechnology InformationNLM: National Library of MedicineNIH: National Institutes of HealthGOV: the US GOVernment top-level domain] In the search bar, enter mbp1 and click Search. On the resulting page, look for the Protein section and click on the link. What do you find? The result page of your search in “All Databases” is the “Global Query Result Page” of the Entrez system. If you follow the “Protein” link, you get taken to the more than 610 sequences in the NCBI Protein database that contain the keyword “mbp1”. But when you look more closely at the results, you see that the result is quite non-specific: searching only by keyword retrieves a multiubiquitin chain binding protein in Arabidopsis, myrosinase binding proteins, bacterial mannose binding proteins, a Saccharomyces protein (perhaps one that we are actually interested in), maltose binding proteins, myelin basic proteins - and much more. There must be a more specific way to search, and indeed there is. Time to read up on the Entrez system. 5.5 Task 7 Navigate to the Entrez Help Page and read about the Entrez system, especially about: Boolean operators, wildcards, limits, and filters. You should minimally understand: How to search by keyword; How to search by gene or protein name; How to restrict a search to a particular organism. And you should know that these filters are in part database specific, i.e. not all of them will work in all databases. Don’t skip this part, you should know the more common options and how to find the others. It would be great to have a synopsis of the important fields for reference, wouldn’t it? We have started building one on the Student Wiki (A synopsis of Entrez codes). Currently, I think it lacks structure, and examples. Contributors and editors welcome! Keyword and organism searches are pretty universal, but apart from that, each NCBI database has its own set of specific fields. You can access the keywords via the Advanced Search interface of any of the database pages. 5.6 Protein Sequence 5.7 Task 8 With this knowledge we can restrict the search to proteins called “Mbp1” that occur in Baker’s Yeast. Return to the Global Search page and in the search field, type: Mbp1[protein name] AND “Saccharomyces cerevisiae”[organism] This finds two entries in the Protein database. Follow the link to the result CAA98618.1—a data record in Genbank Flat File (GFF) format5. The database identifier CAA98618.1 tells you that this is a record in the GenPept database. There are actually several, identical versions of this sequence in the NCBI’s holdings. A link to the “Identical Protein Groups” Database near the top of the record shows you what these are: Some of the sequences represent duplicate entries of the same gene (Mbp1) in the same strain (S288c) of the same species (S. cerevisiae). In particular: there are several records for which the source is the INSDC, these are archival entries, submitted by independent yeast genome research projects; there are two entries in the RefSeq database linking to the same protein: [NP_010227.1](https://www.ncbi.nlm.nih.gov/protein/NP_010227.1. One is derived from genome sequence, the other from mRNA. This RefSeq entry is the preferred version of a sequence for our purposes. RefSeq is a curated, non-redundant database which solves a number of problems of archival databases. You can recognize RefSeq identifiers – they always look like NP_12345.1, NM_12345.1, XP_12345.1, NC_12345.1 etc. This reflects whether the sequence is protein, mRNA or genomic, and inferred or obtained through experimental evidence. there is a SwissProt sequence P39678.16. This link is kind of a big deal. It’s a cross-reference into UniProt, the huge protein sequence database maintained by the EBI (European Bioinformatics Institute), which is the NCBI’s counterpart in Europe. SwissProt entries have the highest annotation standard overall and are expertly curated. Many Webservices work with UniProt ID’s (e.g. P39678.1), rather than NCBI IDs such as a RefSeq ID. But it used to be until recently that the two databases did not link to each other, mostly for reasons of funding politics. It’s great to see that this divide has now been overcome. Note that while all of these entries come from Saccharomyces cerevisiae, they have been sequenced in different yeast strains. Thus they don’t have to be identical (except for the fact that this is a table of identical sequences), such related sequences might be slightly different because the strains are after all not genetically identical. And sometimes we find identical sequences in quite divergent species. Therefore I would not actually consider EIW11153.1, AJU86440.1, AJU58508.1, and AJU61971.1 to be identical proteins, although they have the same sequence. Note all the .1 suffixes of the sequence identifiers. These are version numbers. Two observations: It’s great that version numbers are now used throughout the NCBI database. This is good database engineering practice because it’s really important for reproducible research that updates to database records are possible, but recognizable. When working with data you always must provide for the possibility of updates, and manage the changes transparently and explicitly. Proper versioning should be a part of all datamodels. In fact, the NCBI has recently phased out its internal unique identifiers – the GI number – in favour of accession-number.version IDs everywhere. When searching, or for general use, you can (and should) omit the version number, i.e. use NP_010227 or P39678 not NP_010227.1 resp. P39678.1. This way the database system will resolve the identifier to the most current, highest version number (unless you want the older one, of course). 5.8 Task 9 Note down the RefSeq ID and the UniProt (SwissProt) ID of Mbp1 in your journal. Follow the link to the RefSeq entry NP_010227.1. Explore the page and explore these links (note the contents in your journal): Under “Analyze this Sequence”: Identify Conserved Domains Under “Protein 3D Structure”: See all 3 structures… Under “Pathways for the MBP1 gene”: Cell cycle - yeast Under “Related information”: Homologs of the MBP1 gene As we see, this is a good start page to explore all kinds of databases at the NCBI via cross-references. 5.9 PubMed Arguably one of the most important databases in the life sciences is PubMed and this is a good time to look at PubMed in a bit more detail. 5.10 Task 10 Return back to the [MBP1 RefSeq record](https://www.ncbi.nlm.nih.gov/protein/NP_010227.1. Find the PubMed link under Related information in the right-hand margin and explore it. These are links that are directly related to the NP_010227 sequence in the database. Next follow the link to “PubMed (Weighted)” which applies a weighting algorithm to find broadly relevant information - an example of literature data mining. PubMed(weighted) appears to give a pretty good overview of systems-biology type, cross-sectional and functional information. But it does not find all Mbp1 related literature. On any of the PubMed pages open the Advanced query page and study the keywords that apply to PubMed searches. These are actually quite important and useful to remember. Make yourself familiar with the section on Search field descriptions and tags in the PubMed help document, (in particular [DP], [AU], [TI], and [TA]), how you use the History to combine searches, and the use of AND, OR, NOT and brackets. Understand how you can restrict a search to reviews only, and what the link to Related citations… is useful for1. Now find publications from anywhere in PubMed with Mbp1 in the title. In the result list, follow the links for the two Biochemistry papers, by Taylor et al. (2000) and by Deleeuw et al. (2008). Download the PDFs, these manuscripts will be needed in a later unit. 5.11 Digression: A “bookmarklet” to access literature PubMed usually includes links to full-text articles, but these are often behind a paywall, even though we have access through our library system (one of the top three in the world incidentally). Here is a bookmarklet (a portmanteau of “bookmark” and “applet”) to seamlessly redirect from a paywall page to full access thorugh our library’s “my access” system. The key is to apply a bit of code that “rewrites” the original URL. In your browser, create a bookmark to anything, call it “MyAccess”“, and put it into your bookmarks bar for convenience. Then edit it: replace the URL of the bookmark with the following snip of Javascript: javascript:(function(){var url=window.location.href;var re=/\\/([\\w.]+)\\/(.*$)/;var match=url.match(re);var newURL=&quot;http://&quot;+match[1]+&quot;.myaccess.library.utoronto.ca/&quot;+match[2];window.location.href=newURL;})();void 0 No line breaks! Then try it. Go to the following article from outside the university network … http://science.sciencemag.org/content/303/5659/788.long … you should see the abstract but you can’t view the full text without being an AAAS member. Then click on your bookmarklet. It should automatically rewrite the URL, take you to the UofT login screen, and take you to a page with full access to the article. I hope you find this as useful as I do. The strategy lends itself to other nice ideas. 5.12 Original Information and Annotation Transfer 5.13 Task 11 In the BIN-Storing_data unit you have found the protein of MYSPE that is most similar to yeast Mbp1, in MYSPE. Navigate to the NCBI Protein page for the RefSeq entry of this protein. Explore the links that go out from the page. Assess which resources are independently useful, and which resources merely recapitulate information that relates to yeast Mbp1, the protein that you originally searched with. The goal is to develop a sense for where a page like this one collects original information, and where it merely acts as a record of annotation transfer. 5.14 Self-evaluation 5.15 Further reading, links and resources If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2017-10-02 Version: 1.0.1 Version history: 1.0.1 Removed NCBI linkrot 1.0 Completed to first live version 0.1 First stub If there is only a single match, you will be been taken directly to the page.↩ Actually the “real” SwissProt identifier would be patterned like MBP1_YEAST. P39678 is the corresponding UniProt identifier.↩ Your operating system can help you keep the files organized. The “file system” is a database.↩ "],
["data-integration.html", "Chapter 6 Data Integration 6.1 Overview 6.2 Task 12 6.3 Task 13 6.4 Task 14 6.5 Task 15 6.6 Self-evaluation 6.7 Further reading, links and resources", " Chapter 6 Data Integration (Integration of biological data; Identifier mapping; Entrez; UniProt; BioMart. ID mapping service and match() function.) 6.1 Overview 6.1.1 Abstract: Data integration is a challenging problem. This unit discusses the issues and how the large databases solve this with NCBI’s Entrez system and the EBI’s UniProt Knoledeg Base and BioMart System. R coding exercises put some technical issues in practice. 6.1.2 Objectives: This unit will: introduce issue of database integration and how the NCBI and the EBI address this; demonstrate use of Entrez, UniProt and BioMart; teach ID mapping techniques with R. 6.1.3 Outcomes: After working through this unit you: are familar with the NCBI and EBI query and retrieval systems; can use BioMart bot online and in R code; can retrieve ID cross references via scripts and match IDs in large tables with R’s match() function. 6.1.4 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. 6.1.5 Prerequisites: This unit builds on material covered in the following prerequisite units: BIN-Databases (Bioinformatics Databases) BIN-EBI (Databases and services at the EBI) BIN-FUNC-Databases (Molecular Function Databases) BIN-Miscellaneous_DB (Miscellaneous Databases for Bioinformatics) BIN-NCBI (The NCBI Database and Services) BIN-PDB (The RCSB-PDB Structure Database) 6.2 Task 12 Read the introductory notes on concepts and approaches to data integration in bioinformatics. 6.3 Task 13 Visit the UniProt ID mapping service, enter NP_010227 into the identifier field, select options from RefSeq Protein to UniProtKB and click Go. Confirm that this retrieved the right identifier. Also note that you could have searched with a list of IDs, and downloaded the results, e.g. for further processing in R. 6.4 Task 14 Open RStudio and load the ABC-units R project. If you have loaded it before, choose File → Recent projects → ABC-Units. If you have not loaded it before, follow the instructions in the RPR-Introduction unit. Choose Tools → Version Control → Pull Branches to fetch the most recent version of the project from its GitHub repository with all changes and bug fixes included. Type init() as requested. Open the file BIN-Data_integration.R and follow the instructions. Note: take care that you understand all of the code in the script. Evaluation in this course is cumulative and you may be asked to explain any part of code. 6.5 Task 15 The biomartr bioconductor package is a second-generation R interface to BioMart that extends the biomaRt package. It has a good quick start introduction to “Functional Annotation”. Navigate to https://www.bioconductor.org/packages/devel/bioc/vignettes/biomaRt/inst/doc/biomaRt.html Work through the tutorial. 6.6 Self-evaluation 6.7 Further reading, links and resources UniProt - NCBI ID mapping - detailed information on how it works. Xie &amp; Ahn (2010) Statistical methods for integrating multiple types of high-throughput data. Methods Mol Biol 620:511-29. (pmid: 20652519) [ PubMed ][ DOI ] If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2017-08-05 Version: 1.0 Version history: 1.0 Completed to first live version 0.1 First stub "],
["expression-analysis.html", "Chapter 7 Expression Analysis 7.1 Overview 7.2 Task 16 7.3 Self-evaluation 7.4 Further reading, links and resources", " Chapter 7 Expression Analysis (Analysing expression measurements; Microarray: spots to levels; NGS: Reads to counts) 7.1 Overview 7.1.1 Abstract: This unit introduces microarray and RNAseq methods to estimate mRNA expression levels in the cell. 7.1.2 Objectives: This unit will: introduce microarray and RNAseq methods to estimate mRNA expression levels in the cell. 7.1.3 Outcomes: After working through this unit you: are familar with key methods and terminology in the field. 7.1.4 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. 7.1.5 Prerequisites: You need the following preparation before beginning this unit. If you are not familiar with this material from courses you took previously, you need to prepare yourself from other information sources: The Central Dogma: Regulation of transcription and translation; protein biosynthesis and degradation; quality control. 7.2 Task 16 Read the introductory notes on measuring and analysing gene expression levels. 7.3 Self-evaluation 7.4 Further reading, links and resources Common file format FAQ at UCSC If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2017-11-10 Version: 1.0 Version history: 1.0 first live version 0.1 First stub "],
["geo.html", "Chapter 8 The NCBI GEO Gene Expression database 8.1 Overview 8.2 Task 17 8.3 Self-evaluation", " Chapter 8 The NCBI GEO Gene Expression database (NCBI GEO: finding and analyzing expression profiles) 8.1 Overview 8.1.1 Abstract: Introduction to the contents and utilities of the GEO mRNA expression database. 8.1.2 Objectives: This unit will: introduce the contents and utilities of the GEO mRNA expression database. 8.1.3 Outcomes: After working through this unit you: can access GEO, find expression datasets and analyze them with the provided tools. 8.1.4 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. 8.1.5 Prerequisites: This unit builds on material covered in the following prerequisite units: BIN-Data_integration (Data Integration) BIN-EXPR-Analysis (Expression Analysis) The transcriptome is the set of a cell’s mRNA molecules. The transcriptome originates from the genome, mostly, that is, and it results in the proteome, again: mostly. RNA that is transcribed from the genome is not yet fit for translation but must be processed: splicing is ubiquitous7 and in addition RNA editing has been encountered in many species. Some authors therefore refer to the exome—the set of transcribed exons— to indicate the actual coding sequence. Microarray technology — the quantitative, sequence-specific hybridization of labelled nucleotides in chip-format — was the first domain of “high-throughput biology”. Today, it has largely been replaced by RNA-seq: quantification of transcribed mRNA by high-throughput sequencing and mapping reads to genes. Quantifying gene expression levels in a tissue-, development-, or response-specific way has yielded detailed insight into cellular function at the molecular level, with recent results of single-cell sequencing experiments adding a new level of precision. But not all transcripts are mapped to genes: we increasingly realize that the transcriptome is not merely a passive buffer of expressed information on its way to be translated into proteins, but contains multiple levels of complex, regulation through hybridization of small nuclear RNAs[(2015) The noncoding explosion. Nat Struct Mol Biol 22:1. (pmid: 25565024) Jarvis &amp; Robertson (2011) The noncoding universe. BMC Biol 9:52. (pmid: 21798102)]. NCBI’s GEO database stores expression data and experiment matadata and makes it publicly available. 8.2 Task 17 Read the article below for a comprehensive current introduction to the GEO database. But do some active reading in the sense that you actually access the GEO database and follow along on the Web with what is being described in the paper. Clough &amp; Barrett (2016) The Gene Expression Omnibus Database. Methods Mol Biol 1418:93-110. (pmid: 27008011) PubMed DOI 8.3 Self-evaluation If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2017-11-10 Version: 1.0 Version history: 1.0 first live version 0.1 First stub Strictly speaking, splicing is an eukaryotic achievement, however there are examples of splicing in prokaryotes as well↩ "],
["de-genes.html", "Chapter 9 Discovering Differentially Expressed Genes 9.1 Overview 9.2 Task 18 9.3 GEO2R 9.4 Self-evaluation 9.5 Further reading, links and resources", " Chapter 9 Discovering Differentially Expressed Genes (Discovering differentially expressed genes) 9.1 Overview 9.1.1 Abstract: Discovering differentially expressed genes in a yeast cell cycle dataset. 9.1.2 Objectives: This unit will: introduce the GEO tools to evaluate differentially expressed genes. 9.1.3 Outcomes: After working through this unit you: can access GEO, search for relevant datasets and find significantly differentially expressed genes in the data. 9.1.4 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. 9.1.5 Prerequisites: You need the following preparation before beginning this unit. If you are not familiar with this material from courses you took previously, you need to prepare yourself from other information sources: The Central Dogma: Regulation of transcription and translation; protein biosynthesis and degradation; quality control. This unit builds on material covered in the following prerequisite units: BIN-EXPR-GEO (The NCBI GEO Gene Expression database) 9.2 Task 18 Read the introductory notes on discovering differentially expressed genes in high-throughput data. 9.3 GEO2R Let’s look at differential expression of Mbp1 and its target genes using the analysis facilities of the GEO database at the NCBI. First, we will search for relevant data sets on GEO, the NCBI’s database for expression data. Navigate to the entry page for GEO data sets. Enter the following query in the usual Entrez query format: “cell cycle”[ti] AND “saccharomyces cerevisiae”[organism]. You should get two datasets among the top hits that analyze wild-type yeast (W303a cells) across two cell-cycles after release from alpha-factor arrest. Choose the experiment with lower resolution (13 samples). On the linked GEO DataSet Browser page, follow the link to the Accession Viewer page: the “Reference series”. Read about the experiment and samples, then follow the link to analyze with GEO2R View the GEO2R video tutorial on youtube. Now proceed to apply this to the yeast cell-cycle study Define groups: the associated publication shows us that one cell-cycle takes pretty exactly 60 minutes. Create timepoints T0, T1, T2, … T5. Then associate the 0 and 60 min. sample with “T0”; 10 and 70 minutes get grouped as “T1”; 20 and 80 minutes are T2, etc. up to T5. The final sample does not get assigned. Confirm that the Value distributions are unbiased by accessing the value distribution tab - overall, in such experiments, the bulk of the expression values should not change and thus means and quantiles of the expression levels should be about the same. Your distribution should look like the image below: properly grouped into six categories, and unbiased regarding absolute expression levels and trends. Look for differentially expressed genes: open the GEO2R tab and click on Top 250. Analyze the results. Examine the top hits. Click on a few of the gene names in the Gene.symbol column to view the expression profiles that tell you why the genes were found to be differentially expressed. What do you think? Is this what you would have expected for genes’ responses to the cell-cycle? What seems to be the algorithm’s notion of what “differentially expressed” means? Look for expected genes. Here are a few genes that are known to be differentially expressed in the cell-cycle as target genes of the MBF complex: DSE1, DSE2, ERF3, HTA2, HTB2, and GAS3. But what about the MBD complex proteins themselves: Mbp1 and Swi6? The notion of “differential expression” and “cell-cycle dependent expression” do not overlap completely. Significant differential expression is mathematically determined for genes that have low variance within groups and large differences between groups. The algorithm has no concept of any expectation you might have about the shape of the expression profile. All it finds are genes for which differential expression between some groups is statistically supported. The algorithm returns the top 250 of those. Consistency within groups is very important, while we intuitively might be giving more weight to genes that conform to our expectations of a cyclical pattern. Let’s see if we can group our time points differently to enhance the contrast between expression levels for cyclically expressed genes. Let’s define only two groups: one set before and between the two cycles, one set at the peaks - and we’ll omit some of the intermediate values. Remove all of your groups and define two groups only. Call them “A” and “B”. Assign samples for T = 0 min, 10, 60 and 70 min. to the “A” group. Assign sets 30, 40, 90, and 100 to the “B” group. Recalculate the Top 250 differentially expressed genes (you might have to refresh the page to get the “Top 250” button back.) Which of the “known” MBF targets are now contained in the set? What about Mbp1 and Swi6? Finally: Let’s compare the expression profiles for Mbp1, Swi6 and Swi4. It is not obvious that transcription factors are themselves under transcriptional control, as opposed to being expressed at a basal level and activated by phosporylation or ligand binding. In a new page, navigate to the Geo profiles page and enter (Mbp1 OR Swi6 OR Swi4 OR Nrm1 OR Cln1 OR Clb6 OR Act1 OR Alg9) AND GSE3635 (Nrm1, Cln1, and Clb6 are Mbp1 target genes. Act1 and Alg9 are beta-Actin and mannosyltransferase, these are often used as “housekeeping genes, i.e. genes with condition-independent expression levels, especially for qPCR studies - although Alg9 is also an Mbp1 target. We include them here as negative controls. CGSE3635 is the ID of the GEO data set we have just studied). You could have got similar results in the Profile graph tab of the GEO2R page. What do you find? What does this tell you? Would this information allow you to define groups that are even better suited for finding cyclically expressed genes? Click on the profile graph for Mbp1. Describe the evidence you find on that page that allows us to conclude whether or not Mbp1 is a cell-cycle gene. You’ll probably want to think for a moment what this question really means, how a cell-cycle gene could be defined, and what can be considered “evidence”. Finally, note the R script for the GEO2R analysis in the R script tab. This code will run on your machine and make the expression analysis available. Once the datasets are loaded and prepared, you could - for example - perform a “real” time series analysis, calculate correlation coefficients with an idealized sine wave, or search for genes that are co-regulated with your genes of interest. We will explore this in another unit. Value distribution for the yeast cell-cycle experiment GSE3635. Experiments are grouped approximately into equivalent time-points on a cell cycle. 9.4 Self-evaluation 9.5 Further reading, links and resources If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2017-11-10 Version: 1.0 Version history: 1.0 first live version 0.1 First stub "],
["multiple-testing.html", "Chapter 10 Multiple Testing and Significance 10.1 Overview 10.2 Task 19 10.3 Self-evaluation 10.4 Further reading, links and resources", " Chapter 10 Multiple Testing and Significance (Multiple testing problem. Concepts, Bonferroni correction and FDR) 10.1 Overview 10.1.1 Abstract: Searching for significant effects in high-throughput experiments changes the statistical odds of finding highly unusual outcomes. This needs to be properly corrected, especially in situations like expression analysis where we observe tens of thousands of measurements simultaneously and need to determine which ones should be followed up on. 10.1.2 Objectives: This unit will: introduce the concepts of probability correction with Family Wise Error rate and False Discovery Rate. 10.1.3 Outcomes: After working through this unit you: are aware of the need to correct significance levels in situations with multiple observations; are familar with the ideas of the Bonferroni correction and control with the False Discovery Rate (FDR). 10.1.4 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. 10.1.5 Prerequisites: This unit builds on material covered in the following prerequisite units: BIN-EXPR-DE (Discovering Differentially Expressed Genes) FND-STA-Significance (Significance) 10.2 Task 19 Read the introductory notes on multiple testing. 10.3 Self-evaluation 10.4 Further reading, links and resources If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2017-11-10 Version: 1.0 Version history: 1.0 first live version 0.1 First stub "],
["geo2r.html", "Chapter 11 GEO2R 11.1 Overview 11.2 Task 20 11.3 Self-evaluation 11.4 Further reading, links and resources", " Chapter 11 GEO2R (Programming for analysis of GEO datasets) 11.1 Overview 11.1.1 Abstract: This unit demonstrates accessing and working with datasets downloaded from NCBI GEO. 11.1.2 Objectives: This unit will: teach downloading and annotating GEO data, and performing differential expression analysis. 11.1.3 Outcomes: After working through this unit you: can access GEO data; are familar with the structure of GEO expression sets; can annotate the data, perform differential expression anlysis and critically evaluate the results. 11.1.4 Deliverables: Time management: Before you begin, estimate how long it will take you to complete this unit. Then, record in your course journal: the number of hours you estimated, the number of hours you worked on the unit, and the amount of time that passed between start and completion of this unit. Journal: Document your progress in your Course Journal. Some tasks may ask you to include specific items in your journal. Don’t overlook these. Insights: If you find something particularly noteworthy about this unit, make a note in your insights! page. 11.1.5 Prerequisites: You need the following preparation before beginning this unit. If you are not familiar with this material from courses you took previously, you need to prepare yourself from other information sources: The Central Dogma: Regulation of transcription and translation; protein biosynthesis and degradation; quality control. This unit builds on material covered in the following prerequisite units: BIN-EXPR-Multiple_testing (Multiple Testing and Significance) 11.2 Task 20 Open RStudio and load the ABC-units R project. If you have loaded it before, choose File → Recent projects → ABC-Units. If you have not loaded it before, follow the instructions in the RPR-Introduction unit. Choose Tools → Version Control → Pull Branches to fetch the most recent version of the project from its GitHub repository with all changes and bug fixes included. Type init() as requested. Open the file RPR-GEO2R.R and follow the instructions. Note: take care that you understand all of the code in the script. Evaluation in this course is cumulative and you may be asked to explain any part of code. 11.3 Self-evaluation 11.4 Further reading, links and resources This unit has focussed on microarray analysis with GEO2R. For RNAseq experiments, refer to the excellent Bioconductor RNAseq analysis tutorial. If in doubt, ask! If anything about this learning unit is not clear to you, do not proceed blindly but ask for clarification. Post your question on the course mailing list: others are likely to have similar problems. Or send an email to your instructor. Author: Boris Steipe boris.steipe@utoronto.ca Created: 2017-08-05 Modified: 2017-11-11 Version: 1.0 Version history: 1.0 first live version 0.1 First stub Your operating system can help you keep the files organized. The “file system” is a database.↩ For real: Excel is miserable and often wrong on statistics, and it makes horrible, ugly plots. See here and here why Excel problems are not merely cosmetic.↩ At the bottom of the window there is a menu that says “sum = …” by default. This provides simple calculations on the selected range. Set the choice to “count”, select all Ankyrin domain entries, and the count shows you how many cells actually have a value.↩ For a list of relational Database Management Systems, see here.↩ If there is only a single match, you will be been taken directly to the page.↩ Actually the “real” SwissProt identifier would be patterned like MBP1_YEAST. P39678 is the corresponding UniProt identifier.↩ Strictly speaking, splicing is an eukaryotic achievement, however there are examples of splicing in prokaryotes as well↩ "]
]
